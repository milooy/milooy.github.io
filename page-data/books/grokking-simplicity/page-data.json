{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/books/grokking-simplicity/","result":{"data":{"site":{"siteMetadata":{"title":"유림로그"}},"markdownRemark":{"id":"66c8c6fe-007e-5267-953f-9c4b672fc69e","excerpt":"Ch.8~9 계층화하기 추상화 단계 통일 전에 Slash2…","html":"<h2>Ch.8~9 계층화하기</h2>\n<h3>추상화 단계 통일</h3>\n<p>전에 Slash21에서 <a href=\"https://www.youtube.com/watch?v=edWbHp_k_9Y\">발표</a>시 얘기했던 내용인데 사실 어케 디테일하게 설명하지 하고 고민했는데</p>\n<p>여기서 어느정도 명확히 말해줘서 만족!</p>\n<p>계층은 대략 이렇게 트리형태로 그려볼 수 있음. 여기서는 ‘카트’코드에 대한 함수로 예시.</p>\n<ol>\n<li>카트에 대한 비지니스 룰: 가장 높은 추상화. <code class=\"language-text\">freeTieClip()</code>(넥타이를 사면 클립을 공짜로 줌), <code class=\"language-text\">gets_free_shipping()</code>(무료배송임)</li>\n<li>제네럴한 비지니스 룰: <code class=\"language-text\">calc_tax()</code>(세금계산. 비지니스 룰이지만 여러 섹션에서 가져다쓸 수 있음)</li>\n<li>카트 기본 동작: <code class=\"language-text\">add_item()</code>, <code class=\"language-text\">isInCart()</code></li>\n<li>물건 기본 동작: <code class=\"language-text\">setPrice()</code></li>\n<li>copy-on-write 동작: <code class=\"language-text\">removeItems()</code></li>\n<li>js 언어 피쳐: <code class=\"language-text\">.slice</code>, <code class=\"language-text\">for loop</code></li>\n</ol>\n<ul>\n<li>하나의 함수 안엔 최대한 비슷한 추상화 레벨들끼리 모아둬야한다. (단일 세부 수준 - single level of detail)\n예를 들어 2단계인 <code class=\"language-text\">calc_tax()</code>랑 6단계인 <code class=\"language-text\">for loop</code>가 섞여있다면 의식의 흐름이 날뛰게 됨.</li>\n<li>이를 정리해서 2단계끼리, 4단계끼리 모아두면 뇌가 디테일을 감지하는데 편할껴! 여러번 해보면서 디자인 감각을 기르세요.</li>\n<li>함수를 추출하다보면(위 리스트에서 보면 6쪽으로 갈수록) 더 제네럴해져서 재사용하기 편해집니다. 테스트하기도 쉬움. 이름짓기도 쉬움. 즉 읽기도 쉬움.</li>\n<li>무분별하게 복잡한 코드를 퉁쳐서 숨기는게 능사가 아님. 계층화를 잘 해서 모든 레이어를 간단하게 만들기!</li>\n<li>비지니스 룰 레벨을 명시적으로 최상단 추상화로 뺀게 인상깊었다.</li>\n<li>상단 레이어일수록 변경 쉽고, 하단일수록 (상위에 영향미치니)변경 어렵다. 하단일수록 시간을 초월한 기능이어야 함. 하단일수록 테스트코드가 중요.</li>\n</ul>\n<h3>추상화 장벽 세우자</h3>\n<p>추상화 장벽이란? 세부사항을 모른채로 기능을 쓸 수 있도록 도와주는 장벽</p>\n<p>e.g. 날씨 오픈API는 이걸 어디서 쓰든 상관 없이 날씨데이터서비스 구현에만 집중하면 됨. 추상화 장벽 잘 세움!</p>\n<hr>\n<h2>Ch. 10~11 일급시민 함수</h2>\n<h3>리팩터링 코드스멜: 함수 이름에 있는 값을 본문에서도 참조하고있음</h3>\n<p>해결: 이름의 값을 떼어버리고 인자로 넘기도록!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// bad</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">setPriceByName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cart<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> price</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"price\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">setTaxByName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cart<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> tax</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tax\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// good</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">setFieldByName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">cart<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> field<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>리팩터링 수법: 콜백으로 바디 교체</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// before</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">saveUser</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">logToSnapErrors</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>모든 API에 try catch 감싸려면 넘 많이 반복해야함.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">withLogging</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">logToSnapErrors</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">withLogging</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">saveUser</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>인수에 함수를 받는 함수를 만들어서 원하는대로 넘긴 함수가 실행되도록 리팩터링</p>\n<h3>일급개체 특징</h3>\n<ol>\n<li>변수 할당 가능</li>\n<li>함수에 인수로 전달 가능</li>\n<li>함수에서 리턴 가능</li>\n<li>배열이나 객체에 저장 가능</li>\n</ol>\n<p>= 마구마구 담거나 넘길 수 있다</p>\n<p>예를 들어 <code class=\"language-text\">+</code>같은건 일급객체가 아니지만\n<code class=\"language-text\">function plus(a, b){return a + b}</code> 처럼 함수로 감싸 일급객체로 만들 수 있다. 이젠 이걸 맘대로 던지고 받을 수 있겠지.</p>\n<h3>고차 함수(High Order Function)란?</h3>\n<p>다른 함수를 인수로 받거나 리턴하는 함수. 이걸 응용해서 다양한 동작을 추상활 할 수 있다.\n대표적으로 <code class=\"language-text\">forEach(arr, fn)</code></p>\n<h2>Ch.12</h2>\n<p>map, filter, reduce 써라</p>\n<h2>Ch.13</h2>\n<h3>가비지 배열</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> goodCustomers <span class=\"token operator\">=</span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>customers<span class=\"token punctuation\">,</span> isGoodCustomer<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 여기서 goodCustomers는 필터링 중간에 한번만 쓰이고 다신 안쓰임. 쓰레기임.</span>\n<span class=\"token keyword\">var</span> withAddress <span class=\"token operator\">=</span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>goodCustomers<span class=\"token punctuation\">,</span> hasAddress<span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"Grokking Simplicity 독서노트","date":"November 23, 2021","description":null,"category":"book"}},"previous":{"fields":{"slug":"/dev/ts-4-0-unknown-on-catch-clause-bindings/"},"frontmatter":{"title":"(TypeScript) catch절의 error변수 접근시 'Argument of type 'unknown' is not assignable...'에러가 나요!"}},"next":{"fields":{"slug":"/books/2021-books/"},"frontmatter":{"title":"2021 독서"}}},"pageContext":{"id":"66c8c6fe-007e-5267-953f-9c4b672fc69e","previousPostId":"1545828c-ecf0-55d6-8418-60bbec8cd72c","nextPostId":"fd89d26c-b873-5b2f-88a9-5769a17fd6eb"}},"staticQueryHashes":["2841359383","3257411868"]}