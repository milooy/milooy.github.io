{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/dev/230402-type-guard/","result":{"data":{"site":{"siteMetadata":{"title":"유림로그"}},"markdownRemark":{"id":"3b5ae1c7-c7b3-5eda-ba94-2eb3d30a0a68","excerpt":"울 팀 치원님께서 변수를 통해 타입가드를 쓰고 싶을 때의 불편함을 제기해주셨다.\n나도 옛날부터 어렴풋이만 이해하고 잘 모르고 있어서 함 찾아봤다. 치원님의 불편제기 “1번 케이스 일 때 nullable 인거는 겪을 때마다 유감스럽네요.” 3번은 왜 되는것인가…","html":"<p>울 팀 치원님께서 변수를 통해 타입가드를 쓰고 싶을 때의 불편함을 제기해주셨다.\n나도 옛날부터 어렴풋이만 이해하고 잘 모르고 있어서 함 찾아봤다.</p>\n<h2>치원님의 불편제기</h2>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\">\n<span class=\"token keyword\">const</span> isPromotion <span class=\"token operator\">=</span> planUsageInfo<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>promotion <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 1.</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isPromotion<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> planUsageInfo<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>promotion<span class=\"token punctuation\">;</span> <span class=\"token comment\">// nullable</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 2.</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>planUsageInfo<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>promotion <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> planUsageInfo<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>promotion<span class=\"token punctuation\">;</span> <span class=\"token comment\">// not nullable</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 3.</span>\n<span class=\"token keyword\">const</span> promotion <span class=\"token operator\">=</span> planUsageInfo<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>promotion<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> isPromotion2 <span class=\"token operator\">=</span> promotion <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isPromotion2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> promotion<span class=\"token punctuation\">;</span> <span class=\"token comment\">// not nullable</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>“1번 케이스 일 때 nullable 인거는 겪을 때마다 유감스럽네요.”</p>\n<h2>3번은 왜 되는것인가</h2>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> singleValue<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=</span> planUsageInfo<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>promotion <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> isSingleValueNotNull <span class=\"token operator\">=</span> singleValue <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isSingleValueNotNull<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> singleValue<span class=\"token punctuation\">;</span> <span class=\"token comment\">// not nullable</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> objectValue<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> foo<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> planUsageInfo<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>promotion <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span> foo<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> foo<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> isObjectValueNotNull <span class=\"token operator\">=</span> objectValue<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\nobjectValue<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> something_from_outside<span class=\"token punctuation\">;</span> <span class=\"token comment\">// object면 이런식으로 중간에 값이 갈아채질 수 있음!!</span>\n<span class=\"token comment\">// objectValue.foo = 3; // 이런 정적 보장 되는 값이 들어갔다면 아래에 foo는 오히려 타입이 number!</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isObjectValueNotNull<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> objectValue<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">;</span> <span class=\"token comment\">// nullable (타입가드 안됨!)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>objectValue<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> objectValue<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">;</span> <span class=\"token comment\">// non nullable</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>3번 같은 경우는 object라서 중간에 값이 변경될 위험이 있음.</li>\n<li>원시타입으로 하면 const 로 빼도 타입가드가 된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> objectValue<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> foo<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> planUsageInfo<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>promotion <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span> foo<span class=\"token operator\">:</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> foo<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> isObjectValueNotNull <span class=\"token operator\">=</span> objectValue<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\nobjectValue<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 이런 정적 보장 되는 값이 들어갔다면</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isObjectValueNotNull<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> objectValue<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 여기는 오히려 타입이 null</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>[<code class=\"language-text\">objectValue.foo](http://objectValue.foo) = null</code> 처럼 정적으로 보장되는 타입이 중간에 들어가면 foo 타입은 null로 고정됨. objectValueNotNull 에 감싸진 block이라도.</li>\n</ul>\n<h2>매번 if (planUsageInfo.data.promotion != null) 로 검사해야하는가? 재사용하고싶다면?</h2>\n<p>⇒ 타입가드를 쓰시오</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">isPromotionType</span><span class=\"token punctuation\">(</span>promotion<span class=\"token operator\">:</span> Promotion <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> promotion <span class=\"token keyword\">is</span> Promotion <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> planUsageInfo<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>promotion <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isPromotionType</span><span class=\"token punctuation\">(</span>planUsageInfo<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>promotion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> planUsageInfo<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>promotion<span class=\"token punctuation\">;</span> <span class=\"token comment\">// not nullable</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"타입가드 간단 톺아보기","date":"April 02, 2023","description":"늘 헷갈렸음","category":"dev"}},"previous":{"fields":{"slug":"/dev/230328-type-challange/"},"frontmatter":{"title":"타입챌린지 풀기"}},"next":{"fields":{"slug":"/dev/230509-chatgpt/"},"frontmatter":{"title":"앤드류응 교수님의 ChatGPT 강의"}}},"pageContext":{"id":"3b5ae1c7-c7b3-5eda-ba94-2eb3d30a0a68","previousPostId":"88a0d3e0-d921-5f63-ac3b-efa60f868cae","nextPostId":"b909abf2-0f3c-5696-ace4-338bb0d09d3c"}},"staticQueryHashes":["2841359383","3257411868"]}