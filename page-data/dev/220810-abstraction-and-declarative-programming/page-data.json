{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/dev/220810-abstraction-and-declarative-programming/","result":{"data":{"site":{"siteMetadata":{"title":"유림로그"}},"markdownRemark":{"id":"e01fbc4e-6b49-57a8-b060-501da364377a","excerpt":"회사 프론트 동료들과 추상화와 선언적인 코드의 관계에 대해서 이런저런 이야기를 나눴습니다.\n머릿속에 추상적으로 있던 개념이 좀 각이 잡혀서 ㅎㅎ\n한 번 글로 적어보려 합니다. 선언형이 뭐냐? 가장 많이들 알고 있는 정의는 How/What 키워드죠. 명령형은 어떻게(How…","html":"<p>회사 프론트 동료들과 추상화와 선언적인 코드의 관계에 대해서 이런저런 이야기를 나눴습니다.\n머릿속에 추상적으로 있던 개념이 좀 각이 잡혀서 ㅎㅎ\n한 번 글로 적어보려 합니다.</p>\n<h2>선언형이 뭐냐?</h2>\n<p>가장 많이들 알고 있는 정의는 How/What 키워드죠.</p>\n<blockquote>\n<p>명령형은 어떻게(How)에, 선언형은 무엇을(What)에 집중합니다</p>\n</blockquote>\n<p>이렇게 보면 어떤 코드는 명령형이고, 어떤 코드는 선언형인지 무 자르듯이 나뉠 것처럼 보이지만, 실은 선언형이란 <strong>명령형 코드에서 ‘어떻게’를 감추고 ‘무엇을’만 노출하는 방식의 추상화</strong>(일종의 리팩토링)입니다.</p>\n<p><img src=\"https://blog.kakaocdn.net/dn/bopSdw/btqEN9L59C3/bFiJmNHGlIEOP0t0KTQz41/img.jpg\" alt=\"기둥 뒤에 공간있어요\">\n(선언형 안에 명령형 있어요…)</p>\n<h3>실생활로 예시를 들어보자</h3>\n<ul>\n<li>명령형: “내 앞의 테이블을 하나씩 확인해서 4명 자리가 있다면 그 테이블로 걸어가서 앉는다”</li>\n<li>선언형: “4명 자리에 앉을게요”</li>\n</ul>\n<p>선언형에선 마법처럼 테이블 확인이 끝난게 아니고, <strong>내부에서 명령형 로직으로 구현</strong>이 되어있음을 가정한 것입니다.</p>\n<h3>코드로 예시를 들어보자</h3>\n<ul>\n<li>명령형: “배열에 있는 모든 숫자를 하나씩 제곱해서 result배열에 넣는다”</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">double</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> results <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    results<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> results\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>선언형: “숫자가 제곱된다. 모든 배열에서.”</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">double</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> item <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서도 선언형이 마법처럼 모든 배열을 순회해준게 아니라, <code class=\"language-text\">map</code>이란 함수에서 <strong>내부적으로 명령형</strong>으로 for문을 돌았습니다.</p>\n<h2>그럼 함수로 묶으면 선언적이게 되냐?</h2>\n<p>그렇다면 What만 이름/인자에 노출하고, How는 함수 내부에 때려박으면 그건 선언형으로 리팩토링 한걸까요?</p>\n<p>위의 실생활 예시를 다시 가져와볼게요.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> myPosition\n\n<span class=\"token comment\">// 4인 테이블이 보일때까지 테이블을 순회한다</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> tables<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tables<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>emptySeat <span class=\"token operator\">>=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    myPosition <span class=\"token operator\">=</span> tables<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>position\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이 코드가 명령형이라는건 다들 느낌 올 거예요.</p>\n<p>근데 그렇다면 다음과 같이 How를 감추고 What만 노출한 함수를 만든다면 ‘선언적 코드’라고 할 수 있을까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">moveToEmptyTable</span><span class=\"token punctuation\">(</span>myPosition<span class=\"token punctuation\">,</span> tables<span class=\"token punctuation\">)</span></code></pre></div>\n<p>좀 애매하쥬?</p>\n<p><img src=\"https://i.pinimg.com/originals/fb/65/a2/fb65a2eb1a2aedca817c4569bf87fcd4.png\" alt=\"hmm cat\"></p>\n<h2>선언적 코드의 추가 조건: 순수하길 바라 >_&#x3C;</h2>\n<p><a href=\"https://en.wikipedia.org/wiki/Declarative_programming\">위키피디아</a>에서 <code class=\"language-text\">Declarative programming</code>을 검색해보면</p>\n<blockquote>\n<p>선언적 프로그래밍은 ‘명령형이 아닌 스타일’ 외에도 대중적인 정의들이 몇 가지 더 있다</p>\n<ul>\n<li>A high-level program that describes what a computation should perform.</li>\n<li>Any programming language that lacks side effects (or more specifically, is referentially transparent)</li>\n<li>A language with a clear correspondence to mathematical logic.</li>\n</ul>\n</blockquote>\n<p>여기서 새롭게 주목할만한 곳은 두 번째 불렛인데,\n<strong>사이드 이펙트가 적고 순수하다</strong>라는 포인트 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">moveToEmptyTable</span><span class=\"token punctuation\">(</span>myPosition<span class=\"token punctuation\">,</span> tables<span class=\"token punctuation\">)</span></code></pre></div>\n<p>위 함수는 왜 충분히 선언적이지 못할까요?</p>\n<p>여러 번 불렀을 때, 혹은 다양한 상황에서 불렀을 때 다른 결과물을 줄 수 있기 때문입니다. 이로써 충분히 <strong>재사용하기가 어려워</strong>졌죠.</p>\n<p>예를 들어 빈 자리에 이미 앉아있는 경우에 또 <code class=\"language-text\">moveToEmptyTable</code>을 호출했다면 그 다음에 있는 빈 자리를 찾아갈지, 아니면 아예 꼬여버릴지 모르는 코드이기 때문이에요.</p>\n<p><strong>언제 불러도 같은 결과를 줄 수 있는 함수</strong>로 리팩토링해본다면, 다음과 같이 두 함수로 쪼개면 어떨까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> emptyTablePosition <span class=\"token operator\">=</span> <span class=\"token function\">getEmptyTablePosition</span><span class=\"token punctuation\">(</span>tables<span class=\"token punctuation\">)</span>\n<span class=\"token function\">move</span><span class=\"token punctuation\">(</span>me<span class=\"token punctuation\">,</span> emptyTablePosition<span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>코드의 절차적인 순서에 상관 없이 언제 어디서 불러도 동일한 결과물을 주고 (재사용성 up!)</li>\n<li>What이 함수명에 적절히 표현되었으며</li>\n<li>세부 구현은 함수 내부에 추상화 된</li>\n</ul>\n<p>코드가 되었네요.</p>\n<h2>선언적 함수의 또 다른 특징: 코드순서 노상관</h2>\n<p><strong>‘절차적인 순서’</strong> 키워드를 좀 더 얘기해볼게요.</p>\n<p>라인 바이 라인의 <strong>코드 순서가 중요하지 않아질수록 더 선언적이게</strong> 됩니다.</p>\n<p>순서 의존도가 없기 때문에 사이드이펙트도 줄어들고 이해하기도 쉬워지구요.</p>\n<p>예를 들면, 리액트 컴포넌트의 prop은 순서에 상관 없이 동일한 동작을 하죠?</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Modal</span></span>\n  <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>뭐먹지<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"짬뽕\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n  <span class=\"token attr-name\">description</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>중국음식?<span class=\"token punctuation\">\"</span></span>\n<span class=\"token punctuation\">></span></span></code></pre></div>\n<p><em>여기서 title, onclick, description 의 코드 순서는 중요하지 않습니다. 그저 필요한 명세를 때려박으면 되어요.</em></p>\n<h2>명령형 추상화, 선언형 추상화</h2>\n<p>기본 구현을 명령형으로 추상화, 선언형으로 추상화 해보면서 확실히 이해해볼게요.</p>\n<p>동, 읍, 면 Input이 있고,\n동을 입력하면 자동으로 읍으로,\n읍을 입력하면 자동으로 면으로 넘어가는 코드입니다.</p>\n<p><strong>(Original) 명령형 코드</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> maxLength<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cursorPosition <span class=\"token operator\">===</span> <span class=\"token string\">\"동\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  읍input<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  읍input<span class=\"token punctuation\">.</span>selectionStart <span class=\"token operator\">=</span> 읍input<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>length\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cursorPosition <span class=\"token operator\">===</span> <span class=\"token string\">\"읍\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  면input<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  면input<span class=\"token punctuation\">.</span>selectionStart <span class=\"token operator\">=</span> 면input<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">.</span>length\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>(Refactor - A) 명령형 추상화</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> isInputFull <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> maxLength\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isInputFull<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cursorPosition <span class=\"token operator\">===</span> <span class=\"token string\">\"동\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">moveToInput</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"읍\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cursorPosition <span class=\"token operator\">===</span> <span class=\"token string\">\"읍\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">moveToInput</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"면\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>(Refactor - B) 선언형 추상화</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Input</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>동<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onFull</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">moveFocusTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">'읍'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Input</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>읍<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onFull</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">moveFocusTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">'면'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Input</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>면<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>정답은 없습니다 ㅎㅎ 여러분은 위와 다른 방식으로 선언형 추상화를 해보셔도 좋겠어요.</p>\n<h2>정리</h2>\n<p>그럼 정리 해볼게요.</p>\n<p>명령형 코드를</p>\n<ul>\n<li>What을 적절히 인터페이스에 노출하면서</li>\n<li>How를 내부에 감추고</li>\n<li>언제 어디서 불러도 동일한 결과가 나와서 재사용하기 편하게 추상화 한다면</li>\n</ul>\n<p>적당~히 만족스러운 선언적 코드가 나오는 것 같습니다 ㅋㅋ</p>\n<p>선언형이 명령형보다 진보한 코드 스타일이라는건 아니에요.</p>\n<p>필요한 만큼 어느 레벨까지 추상화하면 좋을까- 라는 Case by case별로 다른 문제입니다.</p>\n<p>다만 복잡한 웹 코드를 선언적으로 짰을 때 읽기도, 디버깅하기도, 재사용하기도 좋다는 장점이 있죠.</p>\n<p>명령형 코드는 흐름을 따라가면서 읽어줘야하는, <code class=\"language-text\">시간축</code>이라는 레이어가 추가되어 있으니까요.</p>\n<p>그럼 오늘도 Happy coding!</p>\n<h2>Thanks to</h2>\n<p>논의를 꺼내준 유성님, 함께 발전시켜준 병철님 창영님 땡큐쓰</p>","frontmatter":{"title":"선언형, 명령형 코드 그리고 추상화","date":"August 10, 2022","description":"모호한 그 삼각관계","category":"dev"}},"previous":{"fields":{"slug":"/books/220725-software-engineering-at-google/"},"frontmatter":{"title":"구글 엔지니어는 이렇게 일한다"}},"next":{"fields":{"slug":"/books/220913-product-managements-sacred-seven/"},"frontmatter":{"title":"7가지 코드"}}},"pageContext":{"id":"e01fbc4e-6b49-57a8-b060-501da364377a","previousPostId":"c415d11c-513f-5404-ab84-6f6ca01fc040","nextPostId":"95ac5c99-073a-52c8-8492-50e815cc033f"}},"staticQueryHashes":["2841359383","3257411868"]}