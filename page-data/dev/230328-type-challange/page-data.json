{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/dev/230328-type-challange/","result":{"data":{"site":{"siteMetadata":{"title":"유림로그"}},"markdownRemark":{"id":"88a0d3e0-d921-5f63-ac3b-efa60f868cae","excerpt":"230328: 12 - Chainable Options by Anthony Fu (@antfu) #보통 #application 질문 체인 가능 옵션은 일반적으로 Javascript에서 사용됩니다. 하지만 TypeScript…","html":"<h2>230328: 12 - Chainable Options</h2>\n<p>by Anthony Fu (@antfu) #보통 #application</p>\n<h3>질문</h3>\n<p>체인 가능 옵션은 일반적으로 Javascript에서 사용됩니다. 하지만 TypeScript로 전환하면 제대로 구현할 수 있나요?</p>\n<p>이 챌린지에서는 <code class=\"language-text\">option(key, value)</code>과 <code class=\"language-text\">get()</code> 두가지 함수를 제공하는 객체(또는 클래스) 타입을 구현해야 합니다. 현재 타입을 <code class=\"language-text\">option</code>으로 지정된 키와 값으로 확장할 수 있고 <code class=\"language-text\">get</code>으로 최종 결과를 가져올 수 있어야 합니다.</p>\n<p>예시</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">const</span> config<span class=\"token operator\">:</span> Chainable\n\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> config\n  <span class=\"token punctuation\">.</span><span class=\"token function\">option</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">option</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"type-challenges\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">option</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token string\">\"Hello World\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 결과는 다음과 같습니다:</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Result</span> <span class=\"token punctuation\">{</span>\n  foo<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  bar<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    value<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>유림답</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Chainable<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token generic-function\"><span class=\"token function\">option</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Key <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> Value<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> Key<span class=\"token punctuation\">,</span> value<span class=\"token operator\">:</span> Value<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Chainable<span class=\"token operator\">&lt;</span>Omit<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> Key<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>ReturnKey <span class=\"token keyword\">in</span> Key<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> Value<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>ChatGPT랑 같이 여차저차 풀다가 기존 Key 겹치면 뒤에 들어온 값 리턴시키는거 못찾고 결국 정답 봤다. Omit으로 Merge할 대상에 현재Key 제거해주면 되는구나.</li>\n<li>제네릭에 기본값을 주면 제네릭 옵셔널하게 넘길 수 있구나\n<ul>\n<li>그러면 메서드에서 전역처럼 공유해서 쓸 수 있겠구나</li>\n</ul>\n</li>\n</ul>\n<h2>230325: 10 - Tuple to Union</h2>\n<p>by Anthony Fu (@antfu) #보통 #infer #tuple #union</p>\n<h3>질문</h3>\n<p>튜플 값으로 유니온 타입을 생성하는 제네릭 <code class=\"language-text\">TupleToUnion&lt;T></code>를 구현하세요.</p>\n<p>예시:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Arr</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"3\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Test</span> <span class=\"token operator\">=</span> TupleToUnion<span class=\"token operator\">&lt;</span>Arr<span class=\"token operator\">></span> <span class=\"token comment\">// expected to be '1' | '2' | '3'</span></code></pre></div>\n<blockquote>\n<p>GitHub에서 보기: <a href=\"https://tsch.js.org/10/ko\">https://tsch.js.org/10/ko</a></p>\n</blockquote>\n<h3>유림답</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">TupleToUnion<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">number</span><span class=\"token punctuation\">]</span></code></pre></div>\n<ul>\n<li>배열이나 객체의 값을 접근하는데 <code class=\"language-text\">[number]</code>를 유용히 써봐야겠다.\n<ul>\n<li>저러면 union으로 나오는구나</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2>230324: 9 - Deep Readonly</h2>\n<p>by Anthony Fu (@antfu) #보통 #readonly #object-keys #deep</p>\n<h3>질문</h3>\n<p>객체의 프로퍼티와 모든 하위 객체를 재귀적으로 읽기 전용으로 설정하는 제네릭 <code class=\"language-text\">DeepReadonly&lt;T></code>를 구현하세요.</p>\n<p>이 챌린지에서는 타입 파라미터 <code class=\"language-text\">T</code>를 객체 타입으로 제한하고 있습니다. 객체뿐만 아니라 배열, 함수, 클래스 등 가능한 다양한 형태의 타입 파라미터를 사용하도록 도전해 보세요.</p>\n<p>예시:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">X</span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  x<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n    b<span class=\"token operator\">:</span> <span class=\"token string\">\"hi\"</span>\n  <span class=\"token punctuation\">}</span>\n  y<span class=\"token operator\">:</span> <span class=\"token string\">\"hey\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Expected</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">readonly</span> x<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">readonly</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">readonly</span> b<span class=\"token operator\">:</span> <span class=\"token string\">\"hi\"</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">readonly</span> y<span class=\"token operator\">:</span> <span class=\"token string\">\"hey\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Todo</span> <span class=\"token operator\">=</span> DeepReadonly<span class=\"token operator\">&lt;</span><span class=\"token constant\">X</span><span class=\"token operator\">></span> <span class=\"token comment\">// should be same as `Expected`</span></code></pre></div>\n<blockquote>\n<p>GitHub에서 보기: <a href=\"https://tsch.js.org/9/ko\">https://tsch.js.org/9/ko</a></p>\n</blockquote>\n<h3>유림답</h3>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">DeepReadonly<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">Function</span></span>\n  <span class=\"token operator\">?</span> <span class=\"token constant\">T</span>\n  <span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">object</span>\n  <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">readonly</span> <span class=\"token punctuation\">[</span>Key <span class=\"token keyword\">in</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> DeepReadonly<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">[</span>Key<span class=\"token punctuation\">]</span><span class=\"token operator\">></span> <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">:</span> <span class=\"token constant\">T</span></code></pre></div>\n<ul>\n<li>리턴값을 재귀로 둘 수 있구나</li>\n<li>Mapped type 에 익숙해져야겠다</li>\n<li>타입의 리턴값에서 삼항연산자를 쓸 수 있구나</li>\n<li>타입에서 제네릭이 어떤 타입인지 알려면 extends를 쓰는구나</li>\n<li>readonly가 있구나</li>\n</ul>","frontmatter":{"title":"타입챌린지 풀기","date":"March 28, 2023","description":"typeof Yurim === 'BABO'","category":"dev"}},"previous":{"fields":{"slug":"/dev/230324-apps-script-slack-bot/"},"frontmatter":{"title":"Google Apps Script를 활용한 슬랙봇 만들기"}},"next":{"fields":{"slug":"/dev/230402-type-guard/"},"frontmatter":{"title":"타입가드 간단 톺아보기"}}},"pageContext":{"id":"88a0d3e0-d921-5f63-ac3b-efa60f868cae","previousPostId":"667a8f92-1251-5539-b6ce-df9b93b8604d","nextPostId":"3b5ae1c7-c7b3-5eda-ba94-2eb3d30a0a68"}},"staticQueryHashes":["2841359383","3257411868"]}