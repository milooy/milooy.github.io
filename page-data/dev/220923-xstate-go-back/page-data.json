{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/dev/220923-xstate-go-back/","result":{"data":{"site":{"siteMetadata":{"title":"유림로그"}},"markdownRemark":{"id":"b21f691d-5eb5-50a3-b481-51be0c53c2a6","excerpt":"XState를 들어보셨나요?\n복잡한 이벤트, 상태를 선언적으로 개발할 수 있는 FSM이란 모델을\n자바스크립트에서 쉽게 쓸 수 있게 구현해둔 라이브러리입니다.\n(XState가 더 궁금하다면? → https://milooy.github.io/dev/220913-xstate…","html":"<p>XState를 들어보셨나요?\n복잡한 이벤트, 상태를 선언적으로 개발할 수 있는 FSM이란 모델을\n자바스크립트에서 쉽게 쓸 수 있게 구현해둔 라이브러리입니다.\n(XState가 더 궁금하다면? → <a href=\"https://milooy.github.io/dev/220913-xstate/\">https://milooy.github.io/dev/220913-xstate/</a>)</p>\n<p>저는 핸드폰 요금제 가입 Flow를 개발할 때 XState를 사용했는데요,\n여러 페이지에 거쳐 유저가 기입한 정보를 얻어내는 flow를 한번에 정의하기 참 좋아서 만족도가 높았습니다</p>\n<p>예를 들면</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[통신사 선택 페이지] ->(다음 버튼 클릭) -> [납부카드 입력 페이지]\n                                 -> (직접기입 버튼 클릭) -> [직접입력 페이지]</code></pre></div>\n<p>디자이너가 한 판으로 그려주는 이런 일련의 flow를 다음과 같이 객체 하나로 정의할 수 있게 되는거죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">state</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">통신사선택페이지</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">on</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">다음버튼클릭</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">target</span><span class=\"token operator\">:</span> <span class=\"token string\">'납부카드입력페이지'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">직접기입버튼클릭</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">target</span><span class=\"token operator\">:</span> <span class=\"token string\">'통신사직접입력페이지'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">통신사직접입력페이지</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">on</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">직접기입버튼클릭</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">target</span><span class=\"token operator\">:</span> <span class=\"token string\">'납부카드입력페이지'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">납부카드입력페이지</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'final'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다만 큰 산이 하나 있었습니다.\n여러 페이지에 거쳐 정보를 받아내는 설문조사형 UX라 뒤로가기, 앞으로가기가 가능해야하는데\n“가용한 모든 이벤트와 상태를 정적으로 미리 생성해둔다!” 란 XState의 컨셉에선\n“동적으로 쌓이는 history를 참조해서 페이지를 이동시킨다!” 가 근본적으로 들어맞지 않더라구요.</p>\n<p>조금 더 상세히 보면,\nXState는 정해진 개수의 이벤트를 통해 상태를 변경시키는 컨셉을 가지고 있습니다.\n예를 들어 NEXT라는 이벤트를 통해 A페이지에서 B페이지로 상태를 이동했다면,\n뒤로가기를 위해서 B페이지에서 A페이지로 상태를 이동하는 이벤트도 사전에 정의해줘야 합니다.</p>\n<p>하지만 이를 위해 모든 노드에 뒤로가기 이벤트를 하드코딩으로 심는건 비효율적일 뿐더러\n동적으로 이동한 경우나 앞으로가는 경우는 실제 브라우저의 history가 쌓이기 전까진 알 수 없습니다\n(e.g. C에서 뒤로가기시 A에서 왔는지, B에서 왔는지 정적으로는 판별 불가능)</p>\n<p>하지만 결국 그랬듯이 우리는 답을 찾아낼 수 있습니다.</p>\n<h2>방법1: 정적인 배열을 참고해 뒤로갈, 앞으로 갈 페이지 알아내기</h2>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> steps <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a페이지\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b페이지\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c페이지\"</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> machine <span class=\"token operator\">=</span> <span class=\"token function\">createMachine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">on</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">BACK</span><span class=\"token operator\">:</span> steps<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">currentStep</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> previousStep <span class=\"token operator\">=</span> steps<span class=\"token punctuation\">[</span>steps<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>currentStep<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function-variable function\">cond</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_context<span class=\"token punctuation\">,</span> _event<span class=\"token punctuation\">,</span> meta</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> meta<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span>currentStep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">target</span><span class=\"token operator\">:</span> previousStep<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>페이지를 이동하는 순서가 정해져있다면 쉽게 앞으로가기, 뒤로가기 이벤트를 정적으로 생성해낼 수 있습니다.</p>\n<p>다만 뒤로가기 해서 보여줘야 하는 페이지가 런타임에 동적으로 정해진다면 사용할 수 없습니다.</p>\n<p>(C페이지가 A에서 왔는지, B에서 왔는지는 사용자가 어떻게 쓰냐에 따라 달라지니)</p>\n<ul>\n<li>비슷한 디스커션: <a href=\"https://github.com/statelyai/xstate/discussions/1939\">https://github.com/statelyai/xstate/discussions/1939</a></li>\n</ul>\n<h2>방법2: 상태 그래프를 통해 정적으로 역계산 + Context에서 History객체 관리</h2>\n<h3>예시 상황</h3>\n<blockquote>\n<p>A페이지에서 이벤트1을 하면 B페이지로 가고, 이벤트2를 하면 C페이지로 갑니다.\nB페이지에서 이벤트3을 하면 C페이지로 갑니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">state</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">A</span><span class=\"token literal-property property\">페이지</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">on</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        이벤트<span class=\"token number\">1</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">target</span><span class=\"token operator\">:</span> <span class=\"token string\">'B페이지'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        이벤트<span class=\"token number\">2</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">target</span><span class=\"token operator\">:</span> <span class=\"token string\">'C페이지'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">B</span><span class=\"token literal-property property\">페이지</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">on</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        이벤트<span class=\"token number\">3</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">target</span><span class=\"token operator\">:</span> <span class=\"token string\">'C페이지'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">C</span><span class=\"token literal-property property\">페이지</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'final'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서 C페이지에서 뒤로가기 하면 히스토리에 따라 B페이지/A페이지로 갈 수 있습니다.\n이를 미리 정의해놓기 위해 state를 참고해 target을 C페이지로 보내는 모든 노드를 찾고(A페이지, B페이지)</p>\n<ul>\n<li>cond에서 context를 참고해 이전 페이지로 돌아갈 수 있는 조건을 만들어줍니다.\n<ul>\n<li>컨디션1: context.previousStep이 A페이지면 A페이지로 보낸다</li>\n<li>컨디션2: context.previousStep이 B페이지면 B페이지로 보낸다</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">on</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">BACK</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token function-variable function\">cond</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">context<span class=\"token punctuation\">,</span> _event<span class=\"token punctuation\">,</span> meta</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">const</span> currentStepName <span class=\"token operator\">=</span> <span class=\"token string\">\"C페이지\"</span>\n          <span class=\"token keyword\">const</span> previousStepName <span class=\"token operator\">=</span>\n            context<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">[</span>context<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>currentStep<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n          <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            meta<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span>currentStepName<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n            previousStepName <span class=\"token operator\">===</span> <span class=\"token string\">\"A페이지\"</span>\n          <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">target</span><span class=\"token operator\">:</span> <span class=\"token string\">\"A페이지\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token function-variable function\">cond</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">context<span class=\"token punctuation\">,</span> _event<span class=\"token punctuation\">,</span> meta</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">const</span> currentStepName <span class=\"token operator\">=</span> <span class=\"token string\">\"C페이지\"</span>\n          <span class=\"token keyword\">const</span> previousStepName <span class=\"token operator\">=</span>\n            context<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">[</span>context<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>currentStep<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n          <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            meta<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span>currentStepName<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n            previousStepName <span class=\"token operator\">===</span> <span class=\"token string\">\"B페이지\"</span>\n          <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">target</span><span class=\"token operator\">:</span> <span class=\"token string\">\"B페이지\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>코드</h3>\n<p>이는 코드로 다음과 같이 표현할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">generateBackConditionsWithContext</span><span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\"><span class=\"token literal-property property\">states</span><span class=\"token operator\">:</span> StatesConfig<span class=\"token operator\">&lt;</span>any<span class=\"token punctuation\">,</span> any<span class=\"token punctuation\">,</span> any<span class=\"token operator\">></span></span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">backConditions</span><span class=\"token operator\">:</span> TransitionsConfig<span class=\"token operator\">&lt;</span>any<span class=\"token punctuation\">,</span> any<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>states<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> stateNodeConfig <span class=\"token operator\">=</span> states<span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stateNodeConfig <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> targetStepNodes <span class=\"token operator\">=</span> <span class=\"token function\">deepSearchItems</span><span class=\"token punctuation\">(</span>stateNodeConfig<span class=\"token punctuation\">,</span> <span class=\"token string\">\"target\"</span><span class=\"token punctuation\">)</span>\n\n    targetStepNodes<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      backConditions<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function-variable function\">cond</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">context<span class=\"token punctuation\">,</span> _event<span class=\"token punctuation\">,</span> meta</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">const</span> currentStepName <span class=\"token operator\">=</span> target\n          <span class=\"token comment\">// TODO: 뭔가 히스토리가 이상한데? indexOf인지 lastIndexOf인지 확인필요</span>\n          <span class=\"token keyword\">const</span> previousStepName <span class=\"token operator\">=</span>\n            context<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">[</span>context<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span>currentStepName<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n          <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            meta<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span>currentStepName<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> previousStepName <span class=\"token operator\">===</span> state\n          <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">target</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">event</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 필요 없지만 타입을 맞추기 위해 넣음</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> backConditions\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// @see https://stackoverflow.com/a/54470906</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">deepSearchItems</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">object</span><span class=\"token operator\">:</span> Record<span class=\"token operator\">&lt;</span>any<span class=\"token punctuation\">,</span> any<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">keyToFind</span><span class=\"token operator\">:</span> string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> <span class=\"token literal-property property\">result</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">const</span> hasKeyProperty <span class=\"token operator\">=</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">,</span> keyToFind<span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hasKeyProperty<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>result<span class=\"token punctuation\">,</span> object<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> objectKey <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>objectKey <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> object<span class=\"token punctuation\">[</span>objectKey<span class=\"token punctuation\">]</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">\"object\"</span> <span class=\"token operator\">&amp;&amp;</span> value <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> o <span class=\"token operator\">=</span> <span class=\"token function\">deepSearchItems</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">[</span>objectKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> keyToFind<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> o <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>result<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>o<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>머신을 사용하는 측에서 히스토리 관련 코드를 추가합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 1. 상태 전이가 일어날 때마다 URL을 shallow업데이트 해서 history를 관리하고, xstate context에 history를 추가적으로 쌓는 액션을 호출합니다.</span>\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  service<span class=\"token punctuation\">.</span><span class=\"token function\">onTransition</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> isTransitionBySendingPushHistoryEvent <span class=\"token operator\">=</span>\n      state<span class=\"token punctuation\">.</span>event<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\"PUSH_HISTORY\"</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isTransitionBySendingPushHistoryEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">QS</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>Router<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>stepQueryKey<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n    Router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">shallow</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PUSH_HISTORY\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">currentStep</span><span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>send<span class=\"token punctuation\">,</span> service<span class=\"token punctuation\">,</span> stepQueryKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 2. 뒤로가기시에 xstate 상태도 동기화를 시켜주기 위해 xstate액션을 호출합니다</span>\n<span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  Router<span class=\"token punctuation\">.</span><span class=\"token function\">beforePopState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> <span class=\"token keyword\">as</span> <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">as</span> <span class=\"token operator\">!==</span> Router<span class=\"token punctuation\">.</span>asPath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// TODO: 앞으로 가기 대응필요</span>\n      <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BACK\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    Router<span class=\"token punctuation\">.</span><span class=\"token function\">beforePopState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>send<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>xstate 머신에도 PUSH_HISTORY, BACK 이벤트를 추가해주면 완성!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> machine <span class=\"token operator\">=</span> createMachine<span class=\"token operator\">&lt;</span>FunnelContext<span class=\"token punctuation\">,</span> AnyEventObject<span class=\"token punctuation\">,</span> FunnelTypeState<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">predictableActionArguments</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">'뒤로가기가능머신'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">on</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token constant\">PUSH_HISTORY</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">actions</span><span class=\"token operator\">:</span> <span class=\"token string\">'pushHistory'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token constant\">BACK</span><span class=\"token operator\">:</span> <span class=\"token function\">generateBackConditionsWithContext</span><span class=\"token punctuation\">(</span>states<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    states<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">actions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">pushHistory</span><span class=\"token operator\">:</span> <span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function-variable function\">history</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">prev<span class=\"token punctuation\">,</span> event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>prev<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">.</span>currentStep<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">guards</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// ...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>방법3: 인접노드 이동만 Static하게 생성해두기 (feat. cond + event)</h2>\n<h4>방법 2의 한계: 뒤로가기만 되고 앞으로가기는 안됨..</h4>\n<p>앞으로가기를 구현하려고 봤더니 브라우저 히스토리가 그냥 stack + pop방식이 아니라는걸 인지했습니다.</p>\n<p>예를 들어 a, b, c , 뒤로가기해서 b, 앞으로가기해서 a 했을 때</p>\n<ul>\n<li>stack이라면 히스토리가 [a, b, c, b, a]일테고</li>\n<li>stack + pop이라면 히스토리가 [a]..일텐데 이건 말이 안됨. pop해버리면 앞으로가기 할수가 없더라구요.</li>\n</ul>\n<p>그래서 브라우저 히스토리는 stack + pop없이 index로 계산해야 합니다.\n위 경우는 히스토리가 [a, b, c]이되 index가 a를 가리키고 있어야 하죠 (그래야 앞으로가기시 b, c를 기억해서 이동할 수 있으니)</p>\n<p>그렇다고 앞으로가기를 위해 브라우저 히스토리와 동일하게 context에 stack + index를 구현해두는건 넘 빡세고 위험해보입니다. single source of truth가 아니니까요.</p>\n<h4>다시 생각해보자</h4>\n<p>바텀업 말고 탑다운으로 out of box에서 다시 생각해봅니다.\n[a, b, c, b] 상황의 b페이지에서</p>\n<ul>\n<li>뒤로가기 하면 a</li>\n<li>앞으로가기하면 b로 이동해야 합니다.</li>\n</ul>\n<p>문제는 <code class=\"language-text\">Router.beforePopState</code> 는 뒤로가기와 앞으로가기를 구분할 수 없다는 거예요.\n둘 모두에서 불립니다… history pop 이벤트핸들러의 리스너 함수니까요.</p>\n<p>우리는 뒤로가기, 앞으로가기 구분 없이 다음 페이지를 알아내야 합니다.</p>\n<p>그런데… 생각해보니 브라우저 히스토리 스택이 이미 내 다음 행선지를 다 알고 있네요?</p>\n<p>xstate내부에 history context를 따로 관리하지 말고\n브라우저 히스토리만 single source of truth로 관리하고\nxstate에선 앞으로가기/뒤로가기시 가용한 모든 이벤트를 뚫어두고\n얘가 다음 행선지를 안내하도록 해보면 어떨까요?</p>\n<h4>히스토리 기반으로 from, to 알아내기</h4>\n<p>일단 xstate를 떠나서 브라우저의 Router.beforePopState 이벤트로 뒤로가기, 앞으로가기시 현재페이지/이동할페이지 경로를 알아냅니다.</p>\n<p>위에서 service.onTransition 으로 경로가 변할 때마다 router shallow push를 하고있었기 때문에 브라우저 히스토리 스택은 착실히 쌓이고 있었을 것예요.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Router<span class=\"token punctuation\">.</span><span class=\"token function\">beforePopState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prop</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">as</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> prop\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">to</span><span class=\"token operator\">:</span> <span class=\"token function\">decodeURI</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">as</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">from</span><span class=\"token operator\">:</span> <span class=\"token function\">decodeURI</span><span class=\"token punctuation\">(</span>Router<span class=\"token punctuation\">.</span>asPath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>굿. 뒤로가기, 앞으로가기 해보니 from, to 가 잘 찍히네요.</p>\n<h4>xstate 이벤트에 행선지 보내기</h4>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Router<span class=\"token punctuation\">.</span><span class=\"token function\">beforePopState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prop</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">as</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> prop\n\n  <span class=\"token keyword\">const</span> nextPageName <span class=\"token operator\">=</span> <span class=\"token constant\">QS</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">as</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>stepQueryKey<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">as</span> <span class=\"token operator\">!==</span> Router<span class=\"token punctuation\">.</span>asPath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NAVIGATE\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">navigateTarget</span><span class=\"token operator\">:</span> nextPageName <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// xstate 머신</span>\nmachine <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">on</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">PUSH_HISTORY</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">actions</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pushHistory\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">NAVIGATE</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// B에서 A로 뒤로가기</span>\n        <span class=\"token comment\">// 현재페이지가 B고 히스토리 이벤트에서 넘겨준 타겟이 A라면 A로 이동해라</span>\n        <span class=\"token function-variable function\">cond</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_context<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">,</span> meta</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">const</span> currentStateValueMatched <span class=\"token operator\">=</span> meta<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> <span class=\"token string\">\"B\"</span>\n          <span class=\"token keyword\">const</span> navigateTargetMatched <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>navigateTarget <span class=\"token operator\">===</span> <span class=\"token string\">\"A\"</span>\n          <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            currentStateValueMatched <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">&amp;&amp;</span> navigateTargetMatched <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span>\n          <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">target</span><span class=\"token operator\">:</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token function-variable function\">cond</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">_context<span class=\"token punctuation\">,</span> event<span class=\"token punctuation\">,</span> meta</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// A에서 B로 앞으로가기</span>\n          <span class=\"token comment\">// 현재페이지가 A고 히스토리 이벤트에서 넘겨준 타겟이 B라면 B로 이동해라</span>\n          <span class=\"token keyword\">const</span> currentStateValueMatched <span class=\"token operator\">=</span> meta<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> <span class=\"token string\">\"A\"</span>\n          <span class=\"token keyword\">const</span> navigateTargetMatched <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>navigateTarget <span class=\"token operator\">===</span> <span class=\"token string\">\"B\"</span>\n          <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            currentStateValueMatched <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">&amp;&amp;</span> navigateTargetMatched <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span>\n          <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">target</span><span class=\"token operator\">:</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  states<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>generate 함수를 만들기 전에, 잘 되는지 static하게 테스트를 해봅니다.\nA ↔ B 사이를 앞으로 가기, 뒤로가기 할 수 있도록</p>\n<p>A에서 B로 이동하는 이벤트, B에서 A로 가는 이벤트를 뚫어줍니다.</p>\n<ul>\n<li>컨디션: 현재 머신상태가 b + 푸시타겟이 a라면: 타겟은 a</li>\n<li>컨디션: 현재 머신상태가 a + 푸시타겟이 b라면: 타겟은 b</li>\n</ul>\n<p>잘 동작한다! 감덩…</p>\n<p>이로 인해 브라우저 history와 xstate context history 가 꼬일 걱정도 덜었습니다.</p>\n<h4>인접한 노드 사이를 이동할 수 있는 이벤트 generate 함수</h4>\n<p>방법2 에서 만들었던 함수를 조금만 고치면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">generateNavigateConditions</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">states</span><span class=\"token operator\">:</span> StatesConfig<span class=\"token operator\">&lt;</span>any<span class=\"token punctuation\">,</span> any<span class=\"token punctuation\">,</span> any<span class=\"token operator\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token literal-property property\">conditions</span><span class=\"token operator\">:</span> TransitionsConfig<span class=\"token operator\">&lt;</span>any<span class=\"token punctuation\">,</span> any<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>states<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">stateValue</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> stateNodeConfig <span class=\"token operator\">=</span> states<span class=\"token punctuation\">[</span>stateValue<span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stateNodeConfig <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> targetStepNodes <span class=\"token operator\">=</span> <span class=\"token function\">deepSearchItems</span><span class=\"token punctuation\">(</span>stateNodeConfig<span class=\"token punctuation\">,</span> <span class=\"token string\">\"target\"</span><span class=\"token punctuation\">)</span>\n\n    targetStepNodes<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> target <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      conditions<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>\n        <span class=\"token function\">getCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">before</span><span class=\"token operator\">:</span> stateValue<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">after</span><span class=\"token operator\">:</span> target <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">getCondition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">before</span><span class=\"token operator\">:</span> target<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">after</span><span class=\"token operator\">:</span> stateValue <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> conditions\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getCondition</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\n  before<span class=\"token punctuation\">,</span>\n  after<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">before</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">after</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">cond</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">_context</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">event</span><span class=\"token operator\">:</span> any<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">meta</span><span class=\"token operator\">:</span> any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> currentStateValueMatched <span class=\"token operator\">=</span> meta<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>value <span class=\"token operator\">===</span> before\n    <span class=\"token keyword\">const</span> navigateTargetMatched <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>navigateTarget <span class=\"token operator\">===</span> after\n    <span class=\"token keyword\">return</span> currentStateValueMatched <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span> <span class=\"token operator\">&amp;&amp;</span> navigateTargetMatched <span class=\"token operator\">===</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">target</span><span class=\"token operator\">:</span> after<span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">event</span><span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 필요 없지만 타입을 맞추기 위해 넣음</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// xstate 머신</span>\nmachine <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">on</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">PUSH_HISTORY</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">actions</span><span class=\"token operator\">:</span> <span class=\"token string\">\"pushHistory\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token constant\">NAVIGATE</span><span class=\"token operator\">:</span> <span class=\"token function\">generateNavigateConditions</span><span class=\"token punctuation\">(</span>states<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  states<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>요약</h4>\n<p>XState 그래프를 받아 앞으로/뒤로 이동 가능한 모든 케이스의 컨디션을 생성합니다.\n브라우저의 뒤로가기, 앞으로가기 이벤트에서 사용합니다.</p>\n<p>[왜 필요한가요?]\nXState는 정해진 개수의 이벤트를 통해 상태를 변경시키는 컨셉을 가지고 있습니다.\n예를 들어 NEXT라는 이벤트를 통해 A페이지에서 B페이지로 상태를 이동했다면,\n뒤로가기를 위해서 B페이지에서 A페이지로 상태를 이동하는 이벤트도 사전에 정의해줘야 합니다.</p>\n<p>하지만 이를 위해 모든 노드에 뒤로가기 이벤트를 하드코딩으로 심는건 비효율적일 뿐더러\n동적으로 이동한 경우나 앞으로가는 경우는 실제 브라우저의 history가 쌓이기 전까진 알 수 없습니다\n(e.g. C에서 뒤로가기시 A에서 왔는지, B에서 왔는지 정적으로는 판별 불가능)</p>\n<p>이를 해결하기 위해 XState의 그래프를 받아 이동 가능한 모든 케이스의 컨디션을 생성해두고,\n브라우저의 뒤로가기, 앞으로가기 이벤트 발생시 이동해야 하는 페이지를 XState이벤트 인자에 넘겨\n걸맞는 condition을 타서 원하는 target으로 상태를 변경시킵니다.</p>\n<p>[Use case]</p>\n<ol>\n<li>브라우저의 popState이벤트 발생. 브라우저는 현재 페이지와 이동해야할 페이지를 알고 있다.</li>\n<li>브라우저가 XState에 “나는 지금 B페이지야. A페이지로 이동해” 라고 요청한다.</li>\n<li>XState는 해당 이벤트를 듣고, 현재 B페이지일때(state.value == ‘B’) 이벤트 인자가 A페이지라는(event. navigateTarget == ‘A’) 조건을 찾는다. 해당 조건은 target을 ‘A’로 변경해준다.</li>\n<li>이로서 브라우저도, XState도 현재 상태가 A페이지가 된다.</li>\n</ol>\n<h2>나 말고 다른 사람들의 Needs…</h2>\n<p>아무도 사용하지 않았던 방식. 라이브러리로 만들어서 제공해보자</p>\n<ul>\n<li><a href=\"https://github.com/statelyai/xstate/issues/188\">https://github.com/statelyai/xstate/issues/188</a></li>\n<li><a href=\"https://github.com/statelyai/xstate/discussions/1654\">https://github.com/statelyai/xstate/discussions/1654</a></li>\n</ul>\n<!-- - 이렇게 하려면 step 이동시마다 history를 쌓아야 한다\n  - 머신 밖에서 동적으로 쌓기\n    - onTransition에서 `send('PUSH_HISTORY', {currentStep: state.value})` 하면 이 이벤트가 상태 전이를 일으키지 않더라도 다시 onTransition을 부르나봄... 그래서 무한호출\n      - send 호출로 일어난 onTransition을 발라낼 수 있다면 거기선 send를 안 하면 될텐데\n        - => 이렇게 해서 성공! 무한호출이 일어나서 보기 어렵다면 debugger를 걸자\n  - 머신 내부에서 정적으로 정의해두기\n    - 모든 transition이 일어날 때마다 추가적으로 호출되는 이펙트에 PUSH_HISTORY 액션을 태우자\n    - 머신 최상단에 `always: { actions: 'pushHistory', cond: 'isAlways' },` 를 정의하고, isAlways 가드를 true로 반환하게 하니까 maximum call stack 에러가 난다. -->","frontmatter":{"title":"XState에서 뒤로가기 구현","date":"September 23, 2022","description":"유한 상태머신에 동적인 이벤트 끼얹기","category":"dev"}},"previous":{"fields":{"slug":"/dev/220913-xstate-docs/"},"frontmatter":{"title":"XState 공식문서 탐구"}},"next":{"fields":{"slug":"/dev/22092-xstate-funnel/"},"frontmatter":{"title":"XState with Funnel"}}},"pageContext":{"id":"b21f691d-5eb5-50a3-b481-51be0c53c2a6","previousPostId":"d0ee267c-c166-5303-9d50-e097a0bb01e5","nextPostId":"cc8c6a32-719a-5849-8d53-9b6b806e617c"}},"staticQueryHashes":["2841359383","3257411868"]}